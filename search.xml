<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue学习笔记-vue特点</title>
      <link href="2021/05/12/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-vue%E7%89%B9%E7%82%B9/"/>
      <url>2021/05/12/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-vue%E7%89%B9%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h3><h4 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0.准备工作"></a>0.准备工作</h4><ul><li>下载vue 可以通过cdn引入vue 也可以下载vue.js本地引入</li><li>vue的基本使用<ul><li>在引入vue后 new Vue({}) 一个vue对象</li><li>这样操作是为了防止XSS,csrf的攻击</li><li>然后就可以在html中进行vue操作了 例如</li><li>例如<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span> : <span class="string">&#x27;#box&#x27;</span>, <span class="comment">//此处写需要进行vue渲染的元素</span></span><br><span class="line">    <span class="attr">data</span> : &#123;</span><br><span class="line">        <span class="comment">// 此处写变量</span></span><br><span class="line">        <span class="attr">myname</span> : <span class="string">&#x27;xiaoLam&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span></span><br><span class="line">    &#123;&#123;20+30&#125;&#125; // 输出50</span><br><span class="line">    &#123;&#123;myname&#125;&#125; // 输出xiaoLam</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="以前的js做法-编程范式-命令式编程"><a href="#以前的js做法-编程范式-命令式编程" class="headerlink" title="以前的js做法 (编程范式: 命令式编程)"></a>以前的js做法 (编程范式: 命令式编程)</h4><ul><li>创建一个div元素,设置id属性</li><li>定义一个变量message</li><li>将这个变量插入div元素中</li><li>如果修改了message的数据</li><li>就要重新将修改后的数据重新插入div</li></ul><h4 id="1-模板语法-编程范式-声明式编程-优点是数据处理和页面渲染分开管理-可以很方便地动态响应数据的改变"><a href="#1-模板语法-编程范式-声明式编程-优点是数据处理和页面渲染分开管理-可以很方便地动态响应数据的改变" class="headerlink" title="1.模板语法 (编程范式: 声明式编程) 优点是数据处理和页面渲染分开管理 可以很方便地动态响应数据的改变"></a>1.模板语法 (编程范式: 声明式编程) 优点是数据处理和页面渲染分开管理 可以很方便地动态响应数据的改变</h4><p>(1) 插值</p><ul><li>文本插值<ul><li>在页面中插入文本的时候 需要将想插入的文本方法双层大括号中</li></ul></li><li>插入html标签 (处于安全考虑,只插入信任的内容)<ul><li>在需要插入html标签的元素中添加 v-html属性(其实叫 指令) 值为要插入的键, 例如<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="attr">el</span> : <span class="string">&#x27;#box&#x27;</span>, <span class="comment">//此处写需要将vue对象挂载到哪一个元素</span></span><br><span class="line">        <span class="attr">data</span> : &#123;</span><br><span class="line">            <span class="comment">// 此处写变量 自己定义的属性 也可以是来自网络的数据 网络的数据改变的话, 页面显示的数据动态改变(这个就是响应式的优点)</span></span><br><span class="line">            <span class="attr">myname</span> : <span class="string">&#x27;xiaoLam&#x27;</span>,</span><br><span class="line">            <span class="attr">myhtml</span>: <span class="string">&#x27;&lt;h1&gt;你好你好&lt;/h1&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span></span><br><span class="line">    &#123;&#123;20+30&#125;&#125; // 输出50</span><br><span class="line">    &#123;&#123;myname&#125;&#125; // 输出xiaoLam</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;myhtml&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> // 输出渲染后的myhtml</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>(2) 指令: 是带有v- 前缀的特殊属性</li></ul></li></ul><ul><li>v-html 插入标签</li><li>v-show 判断是否显示节点 值为布尔值 true表示显示 flase表示隐藏</li><li>v-if 判断是否创建节点 值为布尔值 true表示创建 flase表示不创建</li></ul><h4 id="2-class和style"><a href="#2-class和style" class="headerlink" title="2. class和style"></a>2. class和style</h4><p>(1) 绑定HTML class</p><ul><li>动态绑定class有三种写法<ul><li>三目运算符写法</li><li>对象写法</li><li>数组写法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            <span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">classObj</span>: &#123;</span><br><span class="line">                    <span class="attr">a</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">b</span>: <span class="literal">true</span></span><br><span class="line">                    <span class="comment">// a, b 为class的名字</span></span><br><span class="line">                    <span class="comment">// 对象写法有一个缺点就是不能在没有定义之前创建class</span></span><br><span class="line">                    <span class="comment">// 就比如classObj没有定义 c 这个class 那么就不能动态地创建 c 这个class</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">classArr</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>] <span class="comment">// 要操作数组中的元素也是按照JS的语法来操作</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;isActive?&#x27;red&#x27;:&#x27;blue&#x27;&quot;</span>&gt;</span>动态绑定class 三目运算符写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>动态绑定class 对象写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>动态绑定class 数组写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2) 动态绑定style 跟动态绑定class差不多<br>(3) 想要绑定事件就Vue对象中的methods中编写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            <span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="comment">// 添加变量</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="comment">// 添加方法</span></span><br><span class="line">                <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.isActive = !<span class="built_in">this</span>.isActive;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="v-for-指令"><a href="#v-for-指令" class="headerlink" title="v-for 指令"></a>v-for 指令</h3><ul><li>可以遍历数组中的元素</li><li>实际上就是JS中的for-in循环 例如:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  // 这里就可以循环movies数组中的元素 是响应式的,会自动检测movies中的数据, 增删改都会实时更新</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">movies</span>: [<span class="string">&quot;肖申克的救赎&quot;</span>, <span class="string">&quot;少年派&quot;</span>, <span class="string">&quot;星际穿越&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="v-on-添加事件监听指令-语法糖"><a href="#v-on-添加事件监听指令-语法糖" class="headerlink" title="v-on 添加事件监听指令  语法糖 @"></a>v-on 添加事件监听指令  语法糖 @</h3><ul><li>用于给元素添加事件监听</li><li>具体用法<ul><li>给需要的添加的元素添加属性 v-on:事件类型=”触发的函数名称”</li><li>在Vue对象中的methods中编写对应函数<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.counter++; <span class="comment">// 注意要获取data中的变量 需要写this. 否则Vue会在html中查找该名字的元素</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;add被触发了&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">sub</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.counter--;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;sub被触发了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="VUE中的MVVM-model-view-viewModel"><a href="#VUE中的MVVM-model-view-viewModel" class="headerlink" title="VUE中的MVVM (model view viewModel)"></a>VUE中的MVVM (model view viewModel)</h3><ul><li><p>view层</p><ul><li>视图层</li><li>在前端开发中, 通常就是DOM层</li><li>主要作用就是给用户展示各种信息</li></ul></li><li><p>Model层</p><ul><li>数据层</li><li>可以是自己写的固定数据, 可以是从服务器端请求下来的动态数据</li><li>如果是动态数据在VUE中就可以通过ViewModel实时刷新数据</li></ul></li><li><p>viewModel层</p><ul><li>视图模型层</li><li>是view 和 model 之间沟通的桥梁</li><li>一方面实现了Data Binding(数据绑定), 将Model的改变实时地反映在View中</li><li>另一方面 实现了 DOM listener (DOM监听), 当DOM触发事件的时候, 可以改变对应的Data</li></ul></li></ul><h3 id="Vue实例中传入的options"><a href="#Vue实例中传入的options" class="headerlink" title="Vue实例中传入的options"></a>Vue实例中传入的options</h3><ul><li>有很多 现在只学了三个 el , data , methods</li><li>el : 类型string | HTMLElement   作用是决定Vue实例会管理哪一个DOM</li><li>data : 类型Object | Function   是Vue实例对应的数据对象, [注]在组件当中data必须是一个函数</li><li>methods : 类型{[key:string] : Function}  作用是定义属于Vue的一些方法,可以在其他地方调用, 也可以在指令中调用</li></ul><h4 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h4><ul><li>函数 function 在全局运用</li><li>方法 method 与某个实例对象挂钩的函数就是方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/10/hello-world/"/>
      <url>2021/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
